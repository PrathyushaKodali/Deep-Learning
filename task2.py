# -*- coding: utf-8 -*-
"""Task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tmk9iLyFKenYLahxPyNndJinHp287sUz
"""

import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
import numpy as np
import matplotlib.pyplot as plt

batch_size = 128
num_classes = 10
epochs = 12

# input image dimensions
img_rows, img_cols = 28, 28

# the data, split between train and test sets
(x_train, y_train), (x_test, y_test) = mnist.load_data()

if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'training samples')
print(x_test.shape[0], 'testing samples')

# convert class vectors to binary class matrices
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

def train(kernel_sz,activation_fn,feature_map_sz_1,feature_map_sz_2,nodes_1,nodes_2,pool_sz):
  model = Sequential()
  model.add(Conv2D(feature_map_sz_1, kernel_size=kernel_sz,
                 activation=activation_fn,
                 input_shape=input_shape))
  model.add(MaxPooling2D(pool_size=pool_sz))
  model.add(Conv2D(feature_map_sz_2, (3, 3), activation=activation_fn))
  model.add(MaxPooling2D(pool_size=pool_sz))
  model.add(Flatten())
  model.add(Dense(nodes_1, activation=activation_fn))
  model.add(Dense(nodes_2, activation=activation_fn))

  model.add(Dense(num_classes, activation='softmax'))

  # https://keras.io/optimizers/ 
  model.compile(loss=keras.losses.categorical_crossentropy,
                optimizer=keras.optimizers.Adadelta(lr=1.0, rho=0.95, epsilon=None, decay=0.0),
                metrics=['accuracy'])

  hist = model.fit(x_train, y_train,
            batch_size=batch_size,
            epochs=epochs,
            verbose=1,
            validation_data=(x_test, y_test))
  score = model.evaluate(x_test, y_test, verbose=0)
  print('Test loss:', score[0])
  print('Test accuracy:', score[1])
  return hist


# Training with different kernel sizes
kernel_size_list = [1,3,5,7]
for kernel in kernel_size_list:
  hist = train(kernel_sz=(kernel,kernel),activation_fn='relu',feature_map_sz_1=6,feature_map_sz_2=16,nodes_1=120,nodes_2=84,pool_sz=(2,2))
  k=np.arange(1,epochs+1,1)
  plt.plot(k,hist.history.get('loss'),label="train error")
  plt.plot(k,hist.history.get('val_loss'),label="test error")
  plt.xlabel('epochs')
  plt.ylabel('error')
  plt.legend()
  plt.show()

# Training with different activation function
activation_fn_list = ['sigmoid','relu','tanh','softmax']
for activ_fn in activation_fn_list:
  print(activ_fn)
  hist = train(kernel_sz=(3,3),activation_fn=activ_fn,feature_map_sz_1=6,feature_map_sz_2=16,nodes_1=120,nodes_2=84,pool_sz=(2,2))
  k=np.arange(1,epochs+1,1)
  plt.plot(k,hist.history.get('loss'),label="train error")
  plt.plot(k,hist.history.get('val_loss'),label="test error")
  plt.xlabel('epochs')
  plt.ylabel('error')
  plt.legend()
  plt.show()

# Training with different feature map size
hist = train(kernel_sz=(3,3),activation_fn='relu',feature_map_sz_1=32,feature_map_sz_2=64,nodes_1=120,nodes_2=84,pool_sz=(2,2))
k=np.arange(1,epochs+1,1)
plt.plot(k,hist.history.get('loss'),label="train error")
plt.plot(k,hist.history.get('val_loss'),label="test error")
plt.xlabel('epochs')
plt.ylabel('error')
plt.legend()
plt.show()

# Training with different nodes in dense layer
hist = train(kernel_sz=(3,3),activation_fn='relu',feature_map_sz_1=6,feature_map_sz_2=16,nodes_1=6,nodes_2=4,pool_sz=(2,2))
k=np.arange(1,epochs+1,1)
plt.plot(k,hist.history.get('loss'),label="train error")
plt.plot(k,hist.history.get('val_loss'),label="test error")
plt.xlabel('epochs')
plt.ylabel('error')
plt.legend()
plt.show()

# Training with pooling sizes
hist = train(kernel_sz=(3,3),activation_fn='relu',feature_map_sz_1=6,feature_map_sz_2=16,nodes_1=120,nodes_2=84,pool_sz=(4,4))
k=np.arange(1,epochs+1,1)
plt.plot(k,hist.history.get('loss'),label="train error")
plt.plot(k,hist.history.get('val_loss'),label="test error")
plt.xlabel('epochs')
plt.ylabel('error')
plt.legend()
plt.show()